import React, { useState } from 'react';
import {
    Container,
    Snackbar,
    Alert,
} from '@mui/material';
import UsersTable from './components/UsersTable';
import UserDialog from './components/UserDialog';

// Sample data - replace with actual data from your backend
const initialUsers = [
    {
        id: 50,
        partyName: 'ASHOK TEXTILE',
        partyAddress: '16,HARI OM IND,',
        partyRoute: 'BHATAR',
        userId: 'ASHOKTEXTILE',
        password: 'ASHOKTEXTILE',
        status: 'Enable',
    },
    {
        id: 49,
        partyName: 'SILVER LACE',
        partyAddress: '53 LALWALA',
        partyRoute: 'SONAL',
        userId: 'SILVERLACE',
        password: 'SILVERLACE',
        status: 'Enable',
    },
    // Add more sample data as needed
];

export default function UsersPage() {
    const [users, setUsers] = useState(initialUsers);
    const [dialogOpen, setDialogOpen] = useState(false);
    const [dialogMode, setDialogMode] = useState('add');
    const [selectedUser, setSelectedUser] = useState(null);
    const [snackbar, setSnackbar] = useState({
        open: false,
        message: '',
        severity: 'success',
    });

    const handleCloseSnackbar = () => {
        setSnackbar({ ...snackbar, open: false });
    };

    const showMessage = (message, severity = 'success') => {
        setSnackbar({
            open: true,
            message,
            severity,
        });
    };

    const handleAdd = () => {
        setDialogMode('add');
        setSelectedUser(null);
        setDialogOpen(true);
    };

    const handleEdit = (user) => {
        setDialogMode('edit');
        setSelectedUser(user);
        setDialogOpen(true);
    };

    const handleDelete = (userId) => {
        if (window.confirm('Are you sure you want to delete this user?')) {
            setUsers(users.filter(user => user.id !== userId));
            showMessage('User deleted successfully');
        }
    };

    const handleStatusChange = (userId) => {
        setUsers(users.map(user => {
            if (user.id === userId) {
                const newStatus = user.status === 'Enable' ? 'Disable' : 'Enable';
                return { ...user, status: newStatus };
            }
            return user;
        }));
        showMessage('Status updated successfully');
    };

    const handleSave = (userData) => {
        if (dialogMode === 'add') {
            // In a real app, the ID would be generated by the backend
            const newUser = {
                ...userData,
                id: Math.max(...users.map(u => u.id)) + 1,
            };
            setUsers([...users, newUser]);
            showMessage('User added successfully');
        } else {
            setUsers(users.map(user =>
                user.id === selectedUser.id ? { ...userData, id: user.id } : user
            ));
            showMessage('User updated successfully');
        }
        setDialogOpen(false);
    };

    return (
        <Container
            maxWidth="xl"
            sx={{
                mt: { xs: 2, sm: 4 },
                mb: { xs: 2, sm: 4 },
                px: { xs: 1, sm: 3 },
                overflowX: 'hidden',
                width: '100%',
            }}
        >
            <UsersTable
                data={users}
                onAdd={handleAdd}
                onEdit={handleEdit}
                onDelete={handleDelete}
                onStatusChange={handleStatusChange}
            />

            <UserDialog
                open={dialogOpen}
                onClose={() => setDialogOpen(false)}
                onSave={handleSave}
                user={selectedUser}
                mode={dialogMode}
            />

            <Snackbar
                open={snackbar.open}
                autoHideDuration={4000}
                onClose={handleCloseSnackbar}
                anchorOrigin={{
                    vertical: 'top',
                    horizontal: 'center'
                }}
                sx={{
                    width: { xs: '100%', sm: 'auto' },
                    top: { xs: 0, sm: 24 }
                }}
            >
                <Alert
                    onClose={handleCloseSnackbar}
                    severity={snackbar.severity}
                    variant="filled"
                    sx={{
                        width: '100%',
                        boxSizing: 'border-box',
                        fontSize: { xs: '0.875rem', sm: '1rem' },
                        '& .MuiAlert-message': {
                            padding: { xs: '8px 0', sm: '8px 0' }
                        },
                        '& .MuiAlert-icon': {
                            fontSize: { xs: '20px', sm: '24px' }
                        }
                    }}
                >
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </Container>
    );
}